name: OushuDB RPM

on:
  push:
    paths:
      - '.github/workflows/**'
      - 'sql/**'
  pull_request:

jobs:
  Cache-Binary:
    runs-on: ubuntu-latest
    steps:
 
    - name: Cache HDFS tar
      id: cache-hdfs-tar
      uses: actions/cache@v3
      with:
        key: hadoop-3.3.0
        path: hadoop-3.3.0.tar.gz
        lookup-only: true

    - name: Download HDFS tar
      if: ${{ steps.cache-hdfs-tar.outputs.cache-hit != 'true' }}
      run: wget -nv https://archive.apache.org/dist/hadoop/common/hadoop-3.3.0/hadoop-3.3.0.tar.gz

  Cache-ClickBench-Hits-Data:
    runs-on: ubuntu-latest
    steps:
    - name: Cache ClickBench tar
      id: cache-clickbench-tar
      uses: actions/cache@v3
      with:
        key: clickbench_10M_row
        path: hits.tsv
        lookup-only: true

    - name: Download ClickBench tar
      if: ${{ steps.cache-clickbench-tar.outputs.cache-hit != 'true' }}
      run: |
        curl https://datasets.clickhouse.com/hits_compatible/hits.tsv.gz |
          gunzip  | head -n 10000000 > hits.tsv
        # 10M tuple is the nearest size to run out of available disk space on GitHub Action
        # 1/10 of the full size

    - name: Cache ClickBench gz
      id: cache-clickbench-gz
      uses: actions/cache@v3
      with:
        key: clickbench_10M_row_gz
        path: hits.tsv.gz
        lookup-only: true

    - name: Download ClickBench gz
      if: ${{ steps.cache-clickbench-gz.outputs.cache-hit != 'true' }}
      run: |
        curl https://datasets.clickhouse.com/hits_compatible/hits.tsv.gz |
          gunzip  | head -n 10000000 | gzip --stdout >hits.tsv.gz
        # 10M tuple is the nearest size to run out of available disk space on GitHub Action
        # 1/10 of the full size

  ClickBench-ClickHouse:
    needs: Cache-ClickBench-Hits-Data
    strategy:
      fail-fast: false
      matrix:
        dbms:
          - StarRocks
          - ClickHouse
          - Databend

    runs-on: ubuntu-20.04 # ${{ matrix.platform }}
    steps:
    - name: repo
      run: |
        mkdir ~/dev/
        git clone https://github.com/ClickHouse/ClickBench/ ~/dev/ClickBench
        mkdir $GITHUB_WORKSPACE/clickbench

    - name: Cache ClickBench tar
      id: cache-clickbench-tar
      uses: actions/cache@v3
      with:
        key: clickbench_10M_row
        path: hits.tsv

    - name: StarRocks
      if: ${{ matrix.dbms == 'StarRocks' }}
      run: |
        mv hits.tsv ~/dev/ClickBench/starrocks
        cd ~/dev/ClickBench/starrocks
        sed -i 's/wget/wget -nv /' benchmark.sh
        sed -i 's/wget.*hits/# /' benchmark.sh
        sed -i 's/gzip.*hits/# /' benchmark.sh
        sed -i 's/.*java.*/# /' benchmark.sh
        ./benchmark.sh
        awk -F, '{print "Time:", $2*1000, "ms"} {print "Time:", $3*1000, "ms"} {print "Time:", $4*1000, "ms"}' run.log >$GITHUB_WORKSPACE/clickbench/starrocks-3.0-14122.x86.out

    - name: ClickHouse
      if: ${{ matrix.dbms == 'ClickHouse' }}
      run: |
        mv hits.tsv ~/dev/ClickBench/clickhouse
        cd ~/dev/ClickBench/clickhouse
        sed -i 's/wget/wget -nv /' benchmark.sh
        sed -i 's/wget.*hits/# /' benchmark.sh
        sed -i 's/gzip.*hits/# /' benchmark.sh
        ./benchmark.sh
        awk -F, '{print "Time:", $3*1000, "ms"} ' result.csv >$GITHUB_WORKSPACE/clickbench/clickhouse-21.4-38324.x86.out

    - name: Databend
      if: ${{ matrix.dbms == 'Databend' }}
      run: |
        mv hits.tsv ~/dev/ClickBench/databend
        cd ~/dev/ClickBench/databend
        sed -i 's/wget/wget -nv /' benchmark.sh
        sed -i 's/wget.*hits/# /' benchmark.sh
        sed -i 's/gzip.*hits/# /' benchmark.sh
        sed -i '/databend-query/ asleep 60' benchmark.sh
        ./benchmark.sh
        awk -F, '{print "Time:", $3*1000, "ms"} ' result.csv >$GITHUB_WORKSPACE/clickbench/databend-0.9-4546.x86.out

    - name: check storage size
      run: |
        free -h
        df -h
        lscpu

    - name: archive results
      uses: actions/upload-artifact@v3
      with:
        name: results
        path: |
          clickbench/*.out

  Install-and-Test:
    needs: [Cache-Binary, Cache-ClickBench-Hits-Data]
    defaults:
      run:
        shell: bash -e -l {0}

    strategy:
      fail-fast: false
      matrix:
        # platform: []ubuntu-20.04]
        version:
          # missing RPM
          # - 3.0.1.0
          # - 3.1.2.0
          # - 3.2.0.0
          # - 3.3.0.0
          # - 3.3.0.0
          # - 3.4.1.0

          # severe performance issue on ClickBench
          - 4.0.5.0
          # - 4.0.7.0
          # - 4.2.0.0
          - 4.3.0.0
          - 4.4.0.0

          # acceptable
          - 4.5.2.0
          - 4.6.1.0
          - 4.7.0.0
          - 4.8.0.2
          - 4.9.6.0
          - 5.1.3.0
          - 5.2.3.0
          - 5.3.1.0

          # release candidate
          - 5.4.0.0

        benchmark:
          - tpc-h
        include:
          - benchmark: clickbench
            version: 4.9.6.0
          - benchmark: clickbench
            version: 5.1.3.0
          - benchmark: clickbench
            version: 5.2.3.0
          - benchmark: clickbench
            version: 5.3.1.0
          - benchmark: clickbench
            version: 5.4.0.0

    runs-on: ubuntu-20.04 # ${{ matrix.platform }}
    # if: ${{ matrix.benchmark != 'clickbench' || matrix.version >= '4.9' }}
    # GitHub is unable to checkout the value of matrix in job.if

    steps:

    - uses: actions/checkout@v3

    - name: initilize OS
      run: |
        case $(uname -s) in
          Darwin) .github/workflows/scripts/init_macos.sh ;;
          Linux)  .github/workflows/scripts/init_linux.sh ;;
        esac
        ./install.sh

    - name: check yzy script
      run: |
        # command -v oushudb # DEBUG yzy install succeed
        command -v psql
        env

    - name: Cache HDFS tar
      id: cache-hdfs-tar
      uses: actions/cache@v3
      with:
        key: hadoop-3.3.0
        path: hadoop-3.3.0.tar.gz

    - if: ${{ steps.cache-hdfs-tar.outputs.cache-hit != 'true' }}
      name: Download HDFS tar
      run: wget -nv https://archive.apache.org/dist/hadoop/common/hadoop-3.3.0/hadoop-3.3.0.tar.gz

    - name: install HDFS
      run: |
        sudo install -o $USER -d /usr/local/hadoop-3.3.0
        sudo ln -snf hadoop-3.3.0 /usr/local/hadoop
        sudo tee /usr/local/bin/hdfs <<<'exec /usr/local/hadoop/bin/hdfs $@'
        sudo chmod a+x /usr/local/bin/hdfs
        tar xf hadoop-3.3.0.tar.gz -C /usr/local/

    - name: Detect HAWQ RPM
      run: |
        export RPM_VER=${{ matrix.version }}
        RPM_REPO_PREFIX_LIST=(http://yum.oushu.com/oushurepo/yumrepo/release/oushu-database/centos6/
                              http://yum.oushu.com/oushurepo/yumrepo/release/oushu-database/centos7/
                              http://82.157.61.64:12000/oushurepo/yumrepo/test/oushu-database/centos6/
                             )

        # check out the RPM URL
        for RPM_REPO_PREFIX in "${RPM_REPO_PREFIX_LIST[@]}"; do
          export RPM_REPO=$RPM_REPO_PREFIX/$RPM_VER/release/
          export RPM_NAME=$(curl -s $RPM_REPO/ | sed -E -n 's/.*href="((hawq|oushudb)(UserBuild)?-[0-9][^"]*rpm)".*/\1/p')
          if test -n "$RPM_NAME"; then
            break;
          fi
        done

        test -n "$RPM_NAME"
        echo "RPM_REPO=${RPM_REPO}" >> $GITHUB_ENV
        echo "RPM_NAME=${RPM_NAME}" >> $GITHUB_ENV

        sudo chmod a+rw /usr/local # XXX: ensure for cache export

    - name: Cache HAWQ RPM
      id: cache-hawq-rpm
      uses: actions/cache@v3
      with:
        key: ${{ env.RPM_NAME }}
        # path: ${{ env.RPM_NAME }}
        path: /usr/local/oushudb-${{ matrix.version }}

    - name: Download HAWQ RPM
      if: ${{ steps.cache-hawq-rpm.outputs.cache-hit != 'true' }}
      run: |
        wget $RPM_REPO/$RPM_NAME
        sudo rpm -ivh --nodeps $RPM_NAME

    - name: install HAWQ
      run: |
        sudo ln -snf oushudb-${{ matrix.version }} /usr/local/hawq
        sudo ln -snf oushudb-${{ matrix.version }} /usr/local/oushudb
        if [[ -d /usr/local/oushu/oushudb ]]; then # in case of 5.0
          sudo ln -snf /usr/local/oushu/oushudb /usr/local/hawq
          sudo ln -snf /usr/local/oushu/oushudb /usr/local/oushudb
          sudo ln -snf /usr/local/hawq/oushudb_path.sh /usr/local/hawq/greenplum_path.sh
          sudo chown -R $USER:$USER /usr/local/oushu/
          echo 'export GPHOME=$OUSHUDB_HOME' >>/usr/local/hawq/oushudb_path.sh
        fi
        sudo chown -R $USER:$USER /usr/local/oushudb/

        ls -ltr /usr/local
        source /usr/local/oushudb/greenplum_path.sh
        postgres -V
        echo "PGDATABASE=postgres" >> $GITHUB_ENV
        echo "PGHOST=localhost" >> $GITHUB_ENV

    - name: initilize HDFS
      run: |
        export HADOOP_HOME=/usr/local/hadoop/
        .github/workflows/scripts/init_hdfs.sh

    - name: initilize HAWQ
      run: |
        source /usr/local/oushudb/greenplum_path.sh
        .github/workflows/scripts/init_oushudb.sh
        psql -c 'select version();'
        psql -d postgres -c 'create database hawq_feature_test_db;'

    - name: test HAWQ TPC-H schema
      if: ${{ matrix.benchmark == 'tpc-h' }}
      run: |
        source /usr/local/oushudb/greenplum_path.sh
        mkdir tpc-h/
        psql -d postgres -f sql/tpc-h-schema.sql 
        if hawq version | grep 'version 4\.[0-5]'; then
          psql -d postgres -f sql/tpc-h.ext.exec.dbgen.2.6.sql
        else
          psql -d postgres -f sql/tpc-h-ext-exec-dbgen.sql
        fi
        psql -d postgres -f sql/tpc-h.analyze.sql

    - name: test HAWQ TPC-H load
      if: ${{ matrix.benchmark == 'tpc-h' }}
      run: |
        source /usr/local/oushudb/greenplum_path.sh
        psql -d postgres -af sql/tpc-h.load.sql

    - name: test HAWQ TPC-H analyze
      if: ${{ matrix.benchmark == 'tpc-h' }}
      run: psql -af sql/tpc-h.analyze.sql

    - name: test HAWQ TPC-H execute
      if: ${{ matrix.benchmark == 'tpc-h' }}
      run: |
        source /usr/local/oushudb/greenplum_path.sh
        psql -d postgres -v ON_ERROR_STOP=1 -af sql/tpc-h.sql | tee tpc-h/$RPM_NAME.out |
          sed -n 's/Time://p' | awk '{print NR, $0}'

    - name: Cache ClickBench tar
      if: ${{ matrix.benchmark == 'clickbench' && matrix.version >= '4.9' }}
      id: cache-clickbench-tar
      uses: actions/cache@v3
      with:
        key: clickbench_10M_row_gz
        path: hits.tsv.gz
        fail-on-cache-miss: true

    - name: test ClickBench schema
      if: ${{ matrix.benchmark == 'clickbench' && matrix.version >= '4.9' }}
      run: |
        source /usr/local/oushudb/greenplum_path.sh
        nohup gpfdist -l gpfdist.log &
        # gzip hits.tsv
        mkdir clickbench/
        psql -f sql/clickbench/create.sql
        psql -c "insert into hits select * from hits_ext order by CounterID, EventDate, UserID, EventTime, WatchID;"
        psql -c "select pg_size_pretty(pg_relation_size('hits'));"

    - name: test ClickBench execute
      if: ${{ matrix.benchmark == 'clickbench' && matrix.version >= '4.9' }}
      run: |
        source /usr/local/oushudb/greenplum_path.sh
        psql -c 'ALTER DATABASE postgres set new_executor_enable_partitioned_hashagg to off;'
        psql -c 'ALTER DATABASE postgres set standard_conforming_strings to on;'
        psql -c 'ALTER DATABASE postgres set new_interconnect_type to tcp;'
        psql -c 'ALTER DATABASE postgres set new_executor_enable_proxy_dispatcher to on;' || true
        # psql -c 'ALTER DATABASE postgres set gp_eager_one_phase_agg to on;'
        
        # psql -f <(echo '\timing on'; cat sql/clickbench/queries.sql;) |
        #  tee clickbench/$RPM_NAME.out |
        #  sed -n 's/Time://p' | awk '{print NR, $0}'
        cd sql/clickbench
        ./run.sh | tee $GITHUB_WORKSPACE/clickbench/$RPM_NAME.out
        psql -af <(sed 's/SELECT/explain analyze select/' $GITHUB_WORKSPACE/sql/clickbench/queries.sql) >$GITHUB_WORKSPACE/clickbench/$RPM_NAME.out.explain.analyze

    - name: archive results
      uses: actions/upload-artifact@v3
      with:
        name: results
        path: |
          tpc-h/${{ env.RPM_NAME }}.out
          clickbench/${{ env.RPM_NAME }}.out*

  analyze:
    needs: [Install-and-Test, ClickBench-ClickHouse]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Download all workflow run artifacts
      uses: actions/download-artifact@v3

    - name: html
      run: |
        ls results/
        mkdir ~/dev/
        git clone https://github.com/ClickHouse/ClickBench/ ~/dev/ClickBench

        cd $GITHUB_WORKSPACE/results/tpc-h
        $GITHUB_WORKSPACE/sql/clickbench/generate-result-html.sh
        cp ~/dev/ClickBench/index.html ./

    - name: ClickBench html
      run: |
        rm -rf ~/dev/ClickBench/*/results

        cp $GITHUB_WORKSPACE/results/*.out $GITHUB_WORKSPACE/results/clickbench # FIXME: ugly hack artifact
        cd $GITHUB_WORKSPACE/results/clickbench
        $GITHUB_WORKSPACE/sql/clickbench/generate-result-html.sh
        sed -i 's|curr_timing.toFixed(2)|curr_timing.toFixed(3)|' ~/dev/ClickBench/index.html
        sed -i 's|×${ratio.toFixed(2)}|×${ratio == 1 ? "🚩" : ratio.toFixed(2)}|' ~/dev/ClickBench/index.html
        cp ~/dev/ClickBench/index.html ./

    - name: archive results
      uses: actions/upload-artifact@v3
      with:
        name: results
        path: results
