#!/bin/bash
# set -x
source $(dirname "${BASH_SOURCE[0]-$0}")/../config/bashrc

export PATH="/usr/local/opt/gnu-sed/libexec/gnubin:$PATH"

scale=1
search_path="orc_hash_notpartition_lz4_dict08_notpk_numeric_${scale}g_gpfdist"
file_base=$HOME/dev/hawq/src/test/feature/tpcds/sql/query/${scale}g/stream_1/stream0/
#search_path="magmaap_hash_notpartition_none_none_notpk_numeric_${scale}g"

if psql -d tpcds -c 'select gp_opt_version();'; then
  :
else
  log_error 'psql connect error'
  exit 1
fi

query_set=$(seq 1 99)
if [[ -n "$*" ]]; then
  query_set=$@
  echo "Query Set: $query_set"
fi

off_counter=0
option_base="set search_path=${search_path};"
option_base+="set new_executor=auto;"
# option_base+="set optimizer=on;" # disable orca
# option="${option}set enable_groupagg=off;set gp_enable_fallback_plan=off;"
# option="${option}set gp_enable_agg_distinct=off;set gp_enable_sort_distinct = off;"
echo "$option_base"
log_warning 'TPC-DS analyze start...'


# Check NewQE planner support
echo -e '\033[1mNO\tTime/ms\tStatus\tOperator TBD\tExpression TBD\033[0m'
for query_idx in $query_set; do
  file="$file_base/query${query_idx}_rept1.sql"
  [[ ! -f $file ]] && echo "$file not exists!"
  option=${option_base}
  option+="set client_min_messages=debug1;"

  printf "\033[32m${query_idx}\033[0m\t"
  ts_start=$(date +%s%3N) # macOS unsupport %3N
  output=$(psql -d tpcds -v ON_ERROR_STOP=1 -P pager=off -v EXPLAIN_ANALYZE="${option}EXPLAIN" -af "$file" 2>&1) || echo "$output"
  ts_end=$(date +%s%3N)
  planner_time=$((ts_end - ts_start))
  # echo $ts_start $ts_end $planner_time
  echo "$output" >/dev/null

  mode=$(echo "${output}" | grep 'New executor mode:') || true
  if [[ -n "$mode" ]]; then mode=ON; else mode=OFF; fi
  if [[ ! -f $file ]]; then mode=''; fi

  operator=
  expression=
  if [[ $mode == OFF ]]; then
    ((off_counter+=1))
    mode="\033[31mOFF\033[0m"
    operator=$(echo "${output}" |
      grep 'not support plan ' |
      sed -E 's|.* not support plan node of \{([^ ]+).*\}|\1|' |
      cut -c 1-40 | tr '\n' ' ' | xargs echo)

    expression=$(echo "${output}" |
      grep 'not support expression ' |
      sed -E 's|.* not support expression of \{([^ ]+).*\}|\1|' |
      cut -c 1-40 | tr '\n' ' ' | xargs echo)
  fi

  echo -e "${planner_time}\t${mode}\t${operator}\t${expression}" # > /dev/null
  if [[ "$query_idx" =~ ^(14|23|24|39)$ ]]; then # these sql files run two queries
    echo -e "  \t${planner_time}\t${mode}\t${operator}\t${expression}" # > /dev/null
  fi
  if [[ -n "$*" && $mode == 0 ]]; then
    echo -e "$output"
  fi
done
log_success "Unsupported $off_counter"

# Compare ORC/Parquet old QE
temp_dir=/tmp/tpc-ds-analyze/
mkdir -p ${temp_dir}
for query_idx in $query_set; do
  file="$file_base/query${query_idx}_rept1.sql"
  log_warning "Running $query_idx ..."
  echo "$file"
  check_error=0
  option="${option_base}"
  option+="set client_min_messages=error;"

  # enable ORCA for problematic query
  [[ "$query_idx" =~ ^(10|35|64|95)$ ]] && option="${option}set optimizer=on;"

  output_orc_new=$(psql -d tpcds -v ON_ERROR_STOP=1 -P pager=off -v EXPLAIN_ANALYZE="${option};set new_executor=on;EXPLAIN ANALYZE" -f $file)
  ((check_error += $?))
  output_orc_old=$(psql -d tpcds -v ON_ERROR_STOP=1 -P pager=off -v EXPLAIN_ANALYZE="${option};set new_executor=off;EXPLAIN ANALYZE" -f $file)
  ((check_error += $?))
  # output_parquet=$(psql -d tpcds -v ON_ERROR_STOP=1 -P pager=off -v EXPLAIN_ANALYZE="${option};set search_path=parquet_hash_notpartition_snappy_none_notpk_numeric_${scale}g;EXPLAIN ANALYZE" -f $file)

  if [[ $check_error -gt 0 ]]; then
    echo
    continue
  fi

  warning "Checking $query_idx ..."
  echo "$output_parquet" >${temp_dir}/parquet.${query_idx}.txt
  echo "$output_orc_old" >${temp_dir}/orc_old.${query_idx}.txt
  echo "$output_orc_new" >${temp_dir}/orc_new.${query_idx}.txt
  # hawq_analyze.py /tmp/parquet.txt /tmp/orc_old.txt
  hawq_analyze.py ${temp_dir}/orc_old.${query_idx}.txt ${temp_dir}/orc_new.${query_idx}.txt
  echo
done
